generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Enums ---

enum RoleName {
  USER
  ORGANIZER
}

enum MovieStatus {
  PUBLISHED
  DRAFT
  PAST
}

enum MovieCategory {
  ACTION
  COMEDY
  DRAMA
  HORROR
  SCI_FI
  FANTASY
  THRILLER
  ROMANCE
  ADVENTURE
  DOCUMENTARY
  MUSICAL
  ANIMATION
  OTHERS
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

// --- Models ---

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  role     Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId   Int
  isActive Boolean @default(false)

  @@unique([userId, roleId])
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  name           String
  email          String          @unique
  password       String
  phoneNumber    String
  profileImage   String?         @map("img")
  isVerified     Boolean         @default(false)
  roles          UserRole[]
  referralCode   String?         @unique
  points         Point[]
  transactions   Transaction[]
  reviews        Review[]
  vouchers       Voucher[]
  referredBy     Referral?       @relation("UserReferredBy")
  referralsGiven Referral[]      @relation("UserReferralsGiven")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt
}

model Referral {
  id             Int       @id @default(autoincrement())
  referrer       User      @relation("UserReferralsGiven", fields: [referrerId], references: [id], onDelete: Cascade)
  referrerId     Int
  referred       User      @relation("UserReferredBy", fields: [referredId], references: [id], onDelete: Cascade)
  referredId     Int       @unique
  coupon         Coupon?
  createdAt      DateTime  @default(now()) @map("created_at")
}

model Cinema {
  id         Int         @id @default(autoincrement())
  name       String
  address    String?
  city       String
  screenings Screening[]
}

model Movie {
  id              Int           @id @default(autoincrement())
  title           String
  slug            String        @unique
  poster          String?
  synopsis        String?
  syaratKetentuan String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reviews         Review[]
  category        MovieCategory
  movieStatus     MovieStatus
  screenings      Screening[]
}

model Screening {
  id           Int           @id @default(autoincrement())
  startTime    DateTime
  endTime      DateTime
  movie        Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId      Int
  cinema       Cinema        @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  cinemaId     Int
  ticketTypes  TicketType[]
  transactions Transaction[]

  totalSeats     Int
  availableSeats Int

  @@index([movieId, cinemaId, startTime])
}

model TicketType {
  id          Int       @id @default(autoincrement())
  name        String
  price       Int
  quota       Int
  description String?
  screening   Screening @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  screeningId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
}

model Voucher {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  discount  Int
  startDate DateTime
  endDate   DateTime
  status    VoucherStatus @default(ACTIVE)
  user      User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
}

model OrderItem {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  ticketTypeId  Int
  quantity      Int
  subTotal      Int
}

model Transaction {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  transactionCode String            @unique
  customerId      Int
  screening       Screening         @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  screeningId     Int
  status          TransactionStatus
  paymentProof    String?
  totalPrice      Int
  useCoupon       Boolean           @default(false)
  usePoint        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  expiredAt       DateTime
  updatedAt       DateTime          @updatedAt
  orderItems      OrderItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Coupon {
  id              Int       @id @default(autoincrement())
  discount        Int
  expiresAt       DateTime
  isUsed          Boolean   @default(false)
  usedTemporarily Boolean   @default(false)
  useAt           DateTime?
  referral        Referral  @relation(fields: [referralId], references: [id], onDelete: Cascade)
  referralId      Int       @unique
}

model Point {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  amount          Int
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  isUsed          Boolean   @default(false)
  usedTemporarily Boolean   @default(false)
  useAt           DateTime?
}
